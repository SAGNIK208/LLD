@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.lld.parkinglot.App",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_107236 { 
   	label=lld
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_783271453 { 
   	label=parkinglot
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   App1409552[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)App</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

BasicPaymentStrategy1089443864[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)BasicPaymentStrategy</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ calculateAmount(duration: long, vehicleType: VehicleType, parkingSpotType: ParkingSpotType): double</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ParkingFloor1095964262[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ParkingFloor</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   ID: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   parkingSpotList: List&lt;ParkingSpot&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ findFreeParkingSpot(spotType: ParkingSpotType): ParkingSpot</TD></TR>
<TR><TD ALIGN="LEFT" >+ isFull(spotType: ParkingSpotType): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ParkingLot1409552[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ParkingLot</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   ID: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   ParkingFloorList: List&lt;ParkingFloor&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   ticketManager: TicketManager [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addNewFloor(parkingFloor: ParkingFloor)</TD></TR>
<TR><TD ALIGN="LEFT" >+ allocateSpot(parkingSpotType: ParkingSpotType): ParkingSpot</TD></TR>
<TR><TD ALIGN="LEFT" >+ entry(vehicle: Vehicle, type: ParkingSpotType, paymentStrategy: PaymentStrategy): Ticket</TD></TR>
<TR><TD ALIGN="LEFT" >+ exit(ticket: Ticket, paymentMethod: PaymentMethod): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ getInstance(ParkingFloorList: List&lt;ParkingFloor&gt;, ticketManager: TicketManager): ParkingLot</TD></TR>
<TR><TD ALIGN="LEFT" >+ isFull(parkingSpotType: ParkingSpotType): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ParkingSpot1095964262[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ParkingSpot</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   ID: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   currentVehicle: Vehicle [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   floorNo: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isOccupied: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   type: ParkingSpotType [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ occupy(vehicle: Vehicle)</TD></TR>
<TR><TD ALIGN="LEFT" >+ unOccupy()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PaymentProcessor1089443864[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PaymentProcessor</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ processPayment(ticket: Ticket, paymentMethod: PaymentMethod): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Ticket1853558550[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Ticket</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   ID: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   entryTime: long [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   exitTime: long [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   parkingSpot: ParkingSpot [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   paymentStrategy: PaymentStrategy [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ updateExitTime()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TicketManager1853558550[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TicketManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   activeParkingList: Map&lt;String, ParkingSpot&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ closeTicket(ticketId: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ provideTicket(parkingSpot: ParkingSpot, paymentStrategy: PaymentStrategy): Ticket</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

UPIPayment1089443864[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)UPIPayment</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ pay(amount: double): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
ParkingFloor1095964262 -> ParkingSpot1095964262[label="parkingSpotList
[0..*]"];
ParkingLot1409552 -> ParkingFloor1095964262[label="ParkingFloorList
[0..*]"];
ParkingLot1409552 -> ParkingSpot1095964262[label="entry() -> occupy()"];
ParkingLot1409552 -> PaymentProcessor1089443864[label="exit() -> processPayment()"];
ParkingLot1409552 -> Ticket1853558550[label="exit() -> updateExitTime()"];
ParkingLot1409552 -> TicketManager1853558550[label="ticketManager
[0..1]"];
PaymentProcessor1089443864 -> UPIPayment1089443864[arrowhead=none];
Ticket1853558550 -> BasicPaymentStrategy1089443864[arrowhead=none];
Ticket1853558550 -> ParkingSpot1095964262[label="parkingSpot
[0..1]"];
TicketManager1853558550 -> ParkingSpot1095964262[label="activeParkingList
[0..*]"];
    
}
@enduml